// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/Makovey/shortener/internal/repository/model"
	model0 "github.com/Makovey/shortener/internal/service/model"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetFullURL mocks base method.
func (m *MockRepository) GetFullURL(ctx context.Context, shortURL, userID string) (*model.UserURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFullURL", ctx, shortURL, userID)
	ret0, _ := ret[0].(*model.UserURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFullURL indicates an expected call of GetFullURL.
func (mr *MockRepositoryMockRecorder) GetFullURL(ctx, shortURL, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFullURL", reflect.TypeOf((*MockRepository)(nil).GetFullURL), ctx, shortURL, userID)
}

// GetStats mocks base method.
func (m *MockRepository) GetStats(ctx context.Context) (model0.Stats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", ctx)
	ret0, _ := ret[0].(model0.Stats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockRepositoryMockRecorder) GetStats(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockRepository)(nil).GetStats), ctx)
}

// GetUserURLs mocks base method.
func (m *MockRepository) GetUserURLs(ctx context.Context, userID string) ([]model0.ShortenBatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserURLs", ctx, userID)
	ret0, _ := ret[0].([]model0.ShortenBatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserURLs indicates an expected call of GetUserURLs.
func (mr *MockRepositoryMockRecorder) GetUserURLs(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserURLs", reflect.TypeOf((*MockRepository)(nil).GetUserURLs), ctx, userID)
}

// MarkURLAsDeleted mocks base method.
func (m *MockRepository) MarkURLAsDeleted(ctx context.Context, userID, url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkURLAsDeleted", ctx, userID, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkURLAsDeleted indicates an expected call of MarkURLAsDeleted.
func (mr *MockRepositoryMockRecorder) MarkURLAsDeleted(ctx, userID, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkURLAsDeleted", reflect.TypeOf((*MockRepository)(nil).MarkURLAsDeleted), ctx, userID, url)
}

// SaveUserURL mocks base method.
func (m *MockRepository) SaveUserURL(ctx context.Context, shortURL, longURL, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUserURL", ctx, shortURL, longURL, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUserURL indicates an expected call of SaveUserURL.
func (mr *MockRepositoryMockRecorder) SaveUserURL(ctx, shortURL, longURL, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUserURL", reflect.TypeOf((*MockRepository)(nil).SaveUserURL), ctx, shortURL, longURL, userID)
}

// SaveUserURLs mocks base method.
func (m *MockRepository) SaveUserURLs(ctx context.Context, models []model0.ShortenBatch, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUserURLs", ctx, models, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUserURLs indicates an expected call of SaveUserURLs.
func (mr *MockRepositoryMockRecorder) SaveUserURLs(ctx, models, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUserURLs", reflect.TypeOf((*MockRepository)(nil).SaveUserURLs), ctx, models, userID)
}
